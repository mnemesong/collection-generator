<?php
declare(strict_types=1);

namespace Mnemesong\CollectionGeneratorTest\tools\stubs\collections;

use Mnemesong\CollectionGenerator\exceptions\SortException;
use Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface;
use Webmozart\Assert\Assert;

/**
 * Collection of SomeNewInterfaces.
 *
 * Generated by: mnemesong\collection-generator v.0.2
 */
class SomeNewInterfaceCollection implements \Countable, \JsonSerializable
{
    /* @var \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface[] $objects */
    /* @phpstan-ignore-next-line  */
    protected array $objects = [];

    /**
     * @param SomeNewInterface[] $objects
     */
    public function __construct(array $objects = [])
    {
        foreach ($objects as $object) {
            $this->add($object);
        }
    }

    /**
     * @param \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface $object
     * @return void
     */
    public function add(SomeNewInterface $object): void
    {
        $this->objects[] = $object;
    }

    /**
     * @param \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface $object
     * @return int|null
     */
    protected function getIndex(SomeNewInterface $object): ?int
    {
        $filtered = array_filter($this->objects, function (SomeNewInterface $innerObject) use ($object) {
            return $innerObject == $object;
        });
        if(count($filtered) > 0) {
            return current(array_keys($filtered));
        }
        return null;
    }

    /**
     * @param \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface $object
     * @return int[]
     */
    protected function getAllIndexes(SomeNewInterface $object): array
    {
        $filtered = array_filter($this->objects, function (SomeNewInterface $innerObject) use ($object) {
            return $innerObject == $object;
        });
        return array_keys($filtered);
    }

    /**
     * @return SomeNewInterface[]
     */
    public function getAll(): array
    {
        return $this->objects;
    }

    /**
     * @param \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface $object
     * @return void
     * @throws \ErrorException
     */
    public function removeObject(SomeNewInterface $object): void
    {
        $index = $this->getIndex($object);
        if(!isset($index)) {
            throw new \ErrorException('Not found element in collection ' . static::class);
        }
        unset($this->objects[$index]);
        $this->objects = array_values($this->objects);
    }

    /**
     * @param \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface $object
     * @return int
     * @throws \ErrorException
     */
    public function removeAll(SomeNewInterface $object): int
    {
        $result = 0;
        while($this->getIndex($object) !== null)
        {
            $this->removeObject($object);
            $result++;
        }
        return $result;
    }

    /**
     * @param callable $callbackFunction
     * @return self
     */
    public function filter(callable $callbackFunction): self
    {
        $newArray = array_values(array_filter($this->objects, $callbackFunction));
        return new self($newArray);
    }

    /**
     * @param callable $callbackFunction
     * @return int[]
     */
    public function searchIndexesOf(callable $callbackFunction): array
    {
        $newArray = array_filter($this->objects, $callbackFunction);
        return array_keys($newArray);
    }

    /**
     * @param callable $callbackFunction
     * @return array
     */
    /* @phpstan-ignore-next-line  */
    public function map(callable $callbackFunction): array
    {
        return array_map($callbackFunction, $this->objects);
    }

    /**
     * @param callable $callbackFunction
     * @return void
     * @throws \ErrorException
     */
    public function apply(callable $callbackFunction): void
    {
        $newArray = array_map($callbackFunction, $this->objects);
        $checkFilter = array_filter($newArray, function ($item) {
            return !is_a($item, SomeNewInterface::class);
        });
        if(!empty($checkFilter)) {
            throw new \ErrorException('Wrong type result at Apply() method execution in collection ' . static::class);
        }
        $this->objects = $newArray;
    }

    /**
     * @return int
     */
    public function count(): int
    {
        return count($this->objects);
    }

    /**
     * @param int $index
     * @return \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface|null
     */
    public function getByIndex(int $index): ?SomeNewInterface
    {
        if(!isset($this->objects[$index])) {
            return null;
        }
        return $this->objects[$index];
    }

    /**
     * @param int $index
     * @return int|null
     */
    public function getNextIndex(int $index): ?int
    {
        $index++;
        if(isset($this->objects[$index])) {
            return $index;
        }
        return null;
    }

    /**
     * @return int
     */
    public function getFirstIndex(): ?int
    {
        $index = array_key_first($this->objects);
        if(is_null($index)) {
            return null;
        }
        Assert::integer($index);
        return $index;
    }

    /**
     * @return \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface[]
     */
    public function jsonSerialize(): array
    {
        return $this->objects;
    }

    /**
     * @return \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface
     */
    public function getFirst(): SomeNewInterface
    {
        if($this->count() === 0) {
            throw new \RuntimeException('Error: try to get first element from empty SomeNewInterfaces collection');
        }
        return $this->objects[array_key_first($this->objects)];
    }

    /**
     * @return \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface
     */
    public function getLast(): SomeNewInterface
    {
        if($this->count() === 0) {
            throw new \RuntimeException('Error: try to get last element from empty SomeNewInterfaces collection');
        }
        return $this->objects[array_key_last($this->objects)];
    }

    /**
     * @param callable $func
     * @return self
     */
    public function assertCount(callable $func): self
    {
        if($func($this->count()) !== true) {
            throw new \AssertionError('Count assert error');
        }
        return $this;
    }

    /**
     * @return \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface|null
     */
    public function getFirstOrNull(): ?SomeNewInterface
    {
        if($this->count() > 0) {
            return $this->getFirst();
        }
        return null;
    }

    /**
     * @return \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface|null
     */
    public function getLastOrNull(): ?SomeNewInterface
    {
        if($this->count() > 0) {
            return $this->getLast();
        }
        return null;
    }

    /**
     * @param callable $sortFunc
     * @return $this
     */
    public function sort(callable $sortFunc): self
    {
        if(uasort($this->objects, $sortFunc) === false) {
            throw new SortException('Error while resorting collection');
        }
        $this->objects = array_values($this->objects);
        return $this;
    }

    /**
     * @param int $index
     * @param \Mnemesong\CollectionGeneratorTest\tools\stubs\SomeNewInterface $newItem
     * @return $this
     */
    public function replaceItemByIndex(int $index, SomeNewInterface $newItem): self
    {
        if(empty($this->objects[$index])) {
            throw new \RuntimeException('Element for replacing had not found');
        }
        $this->objects[$index] = $newItem;
        return $this;
    }
}